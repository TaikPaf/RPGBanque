<?php

namespace BanqueBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FactureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactureRepository extends EntityRepository
{
    
    public function factureWaiting($comptecourant){
        $qb = $this->createQueryBuilder('f');

        $qb->join('f.transfert','t')
            ->where('t.debiteur = :compte')
            ->andWhere('f.isvalide = false')
            ->setParameter('compte', $comptecourant);

        return $qb->getQuery()->getResult();
    }

    public function facturePayer($comptecourant){
        $qb = $this->createQueryBuilder('f');

        $qb->join('f.transfert','t')
            ->where('t.debiteur = :compte')
            ->andWhere('f.isvalide = true')
            ->setParameter('compte', $comptecourant)
            ->setMaxResults(50);

        return $qb->getQuery()->getResult();
    }

    public function getNbFactureWaiting($comptecourant){
        $qb = $this->createQueryBuilder('f');

        $qb->join('f.transfert', 't')
            ->where('t.debiteur = :compte' )
            ->andWhere('f.isvalide = false')
            ->setParameter('compte', $comptecourant)
        ->select('COUNT(f)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function allFacturesAcheteur($comptecourant, $nb){
        $qb = $this->createQueryBuilder('f');

        $qb->join('f.transfert','t')
            ->where('t.debiteur = :compte')
            ->setParameter('compte', $comptecourant)
            ->setMaxResults($nb);

        return $qb->getQuery()->getResult();
    }

    public function allFacturesVendeur($comptecourant){
        $qb = $this->createQueryBuilder('f');

        $qb->where('f.vendeur = :compte')
            ->andWhere('f.isvalide = true')
            ->setParameter('compte', $comptecourant);

        return $qb->getQuery()->getResult();
    }
}
